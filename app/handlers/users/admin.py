from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from loguru import logger

from app.db.mysql_db import exam_processing, db_search_exam, delete_exam, get_user_info
from app.utils.misc.wrappers import report_wrapper, search_wrapper, user_wrapper
from app.keyboards.other_kb import get_cancel_button
from app.keyboards.admin_kb import *
from app.utils.states import Exam
from app.utils.misc.file_parsing import file_parser


# –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
# @dp.message_handler(IsAdmin(), commands=['moderator'], state="*")
async def admin_start(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ–±—É—á–∞—Ç–æ—Ä! ü¶æ\n\n'
                    f'–ß—Ç–æ —è —É–º–µ—é:\n\n'
                    f'üëâüèª –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–≥—Ä—É–∑–∏—Ç—å"</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n'
                    f'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–ù–∞–π—Ç–∏"</b>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö\n'
                         f'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–†–∞—Å—Å—ã–ª–∫–∞"</b>, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç–µ—Å—Ç–æ–≤',
                     reply_markup=await get_admin_kb())
    await msg.delete()
    await msg.bot.set_my_commands([
        types.BotCommand('moderator', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    ])

"""–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–æ—Å–∞"""


# –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–∞: –¥–æ–∫—É–º–µ–Ω—Ç
# @dp.message_handler(IsAdmin(), Text(equals='–ó–∞–≥—Ä—É–∑–∏—Ç—å ‚èè'), state=None)
async def exam_start(msg: types.Message):
    await Exam.document.set()
    await msg.answer('<b>–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏</b>\n'
                   '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b> –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /moderator',
                     reply_markup=await get_cancel_button())
    await msg.answer('–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–ø—Ä–æ—Å–∞ üìú')


# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler_admin(msg: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await msg.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=await get_admin_kb())


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
# @dp.message_handler(IsAdmin(), content_types=['document'], state=FSMAdmin.document)
async def load_document(msg: types.Message, state: FSMContext):
    source: tuple = await file_parser(msg.document.file_id, msg.document.file_name)

    if source == 0:
        await msg.answer("–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –ø—Ä–æ—Ç–æ–∫–æ–ª.\n\n–ü—Ä–æ–≤–µ—Ä—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è.\n"
                       "–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —É–∑–Ω–∞–π —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å—é, –ø–µ—Ä–µ–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É–¥–∞, –∏ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ.")
    elif source == 1:
        await msg.answer("–Ø –Ω–µ –Ω–∞—à–µ–ª –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏, –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ —Ç—ã –∏—Ö. –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª - "
                       "–∑–∞–ø–æ–ª–Ω—è–π –∏ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    elif source == 3:
        await msg.answer("–ü–æ–ª–µ '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ.–æ–ø—Ä–æ—Å–∞' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                       "<i>–î–î.–ú–ú.–ì–ì–ì–ì</i> –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    elif source == 4:
        await msg.answer("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ.–æ–ø—Ä–æ—Å–∞'.\n\n–ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–Ω–æ–≤–∞.")
    elif source == 5:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ –¥–∞—Ç—ã –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                       "<i>–î–î.–ú–ú.–ì–ì–ì–ì</i> –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ. ")
    elif source == 6:
        await msg.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –Ø –∫—É—à–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx")
    elif source == 7:
        await msg.answer('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –§–ò–û.\n\n'
                       '–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —É—Ç–æ—á–Ω–∏ —É —Å—Ç–∞–∂–µ—Ä–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –æ–Ω —É –º–µ–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')

    else:
        fullname, user_id, stage_id, result_id, score, exam_date = source[:6]
        try:
            retake_date = source[6].strftime("%d.%m.%Y")
        except AttributeError:
            retake_date = "-"
        retake_date_to_sql = source[6]

        await state.update_data(
            document=msg.document.file_id,
            user_id=user_id,
            stage_id=stage_id,
            result_id=result_id,
            score=score,
            exam_date=exam_date,
            retake_date=retake_date_to_sql
        )
        stages = ["–û–ø—Ä–æ—Å –Ω–∞ 3-–π –¥–µ–Ω—å", "–û–ø—Ä–æ—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ü–∏–∫–ª–∞ –æ–±—É—á–µ–Ω–∏—è", "–û–ø—Ä–æ—Å –Ω–∞ –ò.–û.", "–û–ø—Ä–æ—Å –Ω–∞ –≤—Ä–∞—á–∞", "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —Å—Ç–∞–∂–µ—Ä–∞ L1"]
        stage = stages[stage_id - 1]
        results = ["–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚ùå", "–ù–∞ –ø–µ—Ä–µ—Å–¥–∞—á—É ‚ö†Ô∏è", "–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ"]
        result = results[result_id - 1]
        await msg.answer(f'–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ –≤—ã—Ö–æ–¥–µ:\n\n'
                       f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{fullname}</b>\n'
                       f'–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {stage}\n'
                       f'–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞: {result}\n'
                       f'–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}\n'
                       f'–î–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞: {exam_date.strftime("%d.%m.%Y")}\n'
                       f'–î–∞—Ç–∞ –ø–µ—Ä–µ–æ–ø—Ä–æ—Å–∞: {retake_date}\n\n'
                       f'–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –Ω–∞–∂–º–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å. –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ,'
                       f'—Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"', reply_markup=await get_overload_keyboard())
        await Exam.confirm.set()


# @dp.callback_query_handler(IsAdmin(), exam_callback.filter(action='overload'), state=FSMAdmin.confirm)
async def confirm_document(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    if int(callback_data.get('action_data')) == 1:
        await call.message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube ‚è©\n'
                               '–ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –º–Ω–æ–≥–æ, —Ç–æ –ø—Ä–∏—à–ª–∏ –∏—Ö —á–µ—Ä–µ–∑ Ctrl+Enter')
        await Exam.link.set()
    else:
        await call.message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç üìú')
        await Exam.document.set()


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–∫–∏, –æ–±—ë—Ä—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
# @dp.message_handler(IsAdmin(), state=FSMAdmin.link)
async def load_link(msg: types.Message, state: FSMContext):
    await state.update_data(link=msg.text)
    to_sql = await state.get_data()
    wrapper = await exam_processing(to_sql)
    logger.log('DATABASE', f'@{msg.from_user.username} –≤–Ω–µ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
    await report_wrapper(wrapper, msg=msg)
    await state.finish()


# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
# @dp.callback_query_handler(IsAdmin(), exam_callback.filter(action='delete'))
async def del_callback_run(call: types.CallbackQuery, callback_data: dict):
    await delete_exam(callback_data.get("action_data"))
    logger.info(f'@{call.from_user.username} —É–¥–∞–ª–∏–ª(-–∞) –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.')
    await call.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
    await call.message.delete()


"""–ü–æ–∏—Å–∫"""


# –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞: –∑–∞–ø—Ä–æ—Å –§–ò–û
# @dp.message_handler(IsAdmin(), Text(equals='–ù–∞–π—Ç–∏ üëÄ'), state=None)
async def exam_search_start(msg: types.Message):
    await msg.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏',
                    reply_markup=await get_cancel_button())
    await Exam.exam_searching.set()


# –ü–æ–∏—Å–∫ –§–ò–û –ø–æ –ë–î, –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# @dp.message_handler(IsAdmin(), state=FSMAdmin.trainee_name)
async def exam_search_result(msg: types.Message, state: FSMContext):
    read = await db_search_exam(msg.text.title())
    if not read:
        await msg.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ—Ç ü§î',
                         reply_markup=await get_admin_kb())
    else:
        await search_wrapper(read, msg=msg)
        await msg.answer('–ì–æ—Ç–æ–≤–æ!üëå', reply_markup=await get_admin_kb())
    await state.finish()
    logger.info(f'{msg.from_user.username} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É {msg.text.title()}')


async def employee_search_start(msg: types.Message):
    await msg.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏',
                        reply_markup=await get_cancel_button())
    await Exam.user_searching.set()


async def employee_search_result(msg: types.Message, state: FSMContext):
    result = await get_user_info(msg.text)
    if not result:
        await msg.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ—Ç ü§î',
                         reply_markup=await get_admin_kb())
    else:
        for user in result:
            user_data = await user_wrapper(user)
            await msg.answer(f'{user_data[1]}')
        await msg.answer('–ì–æ—Ç–æ–≤–æ!üëå', reply_markup=await get_admin_kb())
    await state.finish()
    logger.info(f'{msg.from_user.username} –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É {msg.text.title()}')


def setup(dp: Dispatcher):
    dp.register_message_handler(admin_start, is_admin=True, commands=['moderator'], chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(exam_start, Text(equals='–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ä–æ—Å ‚èè'), is_admin=True, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(cancel_handler_admin, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler_admin, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_document, content_types=['document'], state=Exam.document, is_admin=True)
    dp.register_callback_query_handler(confirm_document, exam_callback.filter(action='overload'), state=Exam.confirm, is_admin=True)
    dp.register_message_handler(load_link, is_admin=True, state=Exam.link)
    dp.register_callback_query_handler(del_callback_run, exam_callback.filter(action='delete'), is_admin=True)
    dp.register_message_handler(exam_search_start, Text(equals='–ù–∞–π—Ç–∏ –æ–ø—Ä–æ—Å üëÄ'), is_admin=True, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(exam_search_result, is_admin=True, state=Exam.exam_searching)
    dp.register_message_handler(employee_search_start, Text(equals='–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üë®‚Äç‚öï'), is_admin=True, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(employee_search_result, is_admin=True, state=Exam.user_searching)