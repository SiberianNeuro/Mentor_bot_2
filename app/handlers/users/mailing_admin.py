import asyncio
import logging

from app.db.mysql_db import active_users, get_current_roles
from loader import bot
from app.utils.states import Mailing
from app.keyboards.admin_kb import get_mailing_keyboard, mailing_callback, get_execute_button, \
    get_roles_keyboard, text_switch_button

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import ChatNotFound
from aiogram.dispatcher.filters import Text

"""–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π"""


# –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –≤—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π
# @dp.message_handler(IsAdmin(), commands=['mailing'])
async def mailing(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer("üì£ <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç–µ—Å—Ç–æ–≤</b>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ç–µ—Å—Ç—ã."
                   "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ <b>'–æ—Ç–º–µ–Ω–∞'</b> –∏–ª–∏ <b>/start</b>", reply_markup=await get_roles_keyboard())
    await Mailing.workers.set()


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Ä–æ–ª–∏, –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–æ–ª—å –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–∫—É—â–∏–µ
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='worker'), state=Mailing.workers)
async def get_workers(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    roles = []
    roles.append(callback_data.get('c_data'))
    await state.update_data(roles=roles)
    await c.answer()
    await c.message.answer('–•–æ—Ä–æ—à–æ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è–ª, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–ª. –î–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–Ω—É, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Å—ã–ª–∫–∞–º –Ω–∞ —Ç–µ—Å—Ç?',
                           reply_markup=await get_mailing_keyboard())
    await c.message.delete()


# –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä: –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π,
# –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–∑–∞–≥—Ä—É–∑–∏—Ç—å", —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–æ–ª—å
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='load'), state=Mailing.workers)
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='confirm'), state=Mailing.workers)
async def chose_workers(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    if callback_data.get("action") == 'load':
        await c.answer()
        await c.message.answer('–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –µ—â–µ –æ–¥–Ω—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å üî∞',
                               reply_markup=await get_roles_keyboard())
        await Mailing.process_workers.set()
        await c.message.delete()
    elif callback_data.get("action") == 'confirm':
        await c.answer()
        async with state.proxy() as data:
            data['roles'] = tuple(map(int, data['roles']))
            roles = await get_current_roles(data['roles'])
        await c.message.answer('–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–æ–ª–∏:')
        for role in roles:
            await c.message.answer(f'{role[0]}')
        await c.message.answer('–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–∏–º–∞–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ <b>/mailing</b>',
                               reply_markup=await text_switch_button())
        await c.message.delete()


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ç–æ—Ä–æ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–æ–ª–µ–π, —Å–º–µ–Ω–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# @dp.callback_query_handler(mailing_callback.filter(action='worker'), state=Mailing.process_workers)
async def more_workers(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await c.answer()
    async with state.proxy() as data:
        data['roles'].append(callback_data.get('c_data'))
        logging.info(f'{data["roles"]}')
    await c.message.answer('–•–æ—Ä–æ—à–æ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è–ª, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–ª. –î–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–Ω—É, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Å—ã–ª–∫–∞–º –Ω–∞ —Ç–µ—Å—Ç?',
                           reply_markup=await get_mailing_keyboard())
    await Mailing.workers.set()
    await c.message.delete()

"""–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–µ—Å—Ç"""


# –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –≤—ã—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –°–°–´–õ–ö–£ –Ω–∞ —Ç–µ—Å—Ç
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='execute'), state=Mailing.workers)
async def start_text(c: types.CallbackQuery):
    await c.answer()
    await c.message.answer('–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç üîó')
    await Mailing.start_mailing.set()


# –ü—Ä–∏–µ–º –ø–µ—Ä–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ä–∞–∑–≤–∏–ª–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
# @dp.message_handler(IsAdmin(), state=Mailing.start_mailing)
async def start_mailing(m: types.Message, state: FSMContext):
    text_list = []
    text_list.append(m.text)
    await state.update_data(text_list=text_list)
    await m.answer("–°—É–ø–µ—Ä, —Å—Å—ã–ª–∫—É –≤–∏–∂—É. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
                   reply_markup=await get_mailing_keyboard())
    await Mailing.confirm_mailing.set()


# –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä: –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫,
# –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–∑–∞–≥—Ä—É–∑–∏—Ç—å", —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='load'), state=Mailing.confirm_mailing)
# @dp.callback_query_handler(IsAdmin(), mailing_callback.filter(action='confirm'), state=Mailing.confirm_mailing)
async def chose_mailing(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    if callback_data.get("action") == 'load':
        await c.answer()
        await c.message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç üîó")
        await Mailing.process_mailing.set()
        await c.message.delete()
    elif callback_data.get("action") == 'confirm':
        await c.answer()
        async with state.proxy() as data:
            await c.message.answer('–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:')
            for text in data['text_list']:
                await c.message.answer(text=f'–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ç–µ–±–µ <a href="{text}">—Å—Å—ã–ª–∫—É</a> '
                                                              f'–Ω–∞ —Ç–µ—Å—Ç ‚ö°\n\n'
                                                              f'‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 30 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ñ–æ—Ä–º–∞ '
                                                              f'–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞\n\n'
                                                              f'–ù–µ –∑–∞–±—É–¥—å —Å–≤–æ–π –≥—É–≥–ª-–∞–∫–∫–∞—É–Ω—Ç üì≤\n\n'
                                                              f'–£–¥–∞—á–∏ üçÄ')
            await c.message.answer('–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç—ã –≤–µ—Ä–Ω—ã, –∂–º–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–ø–∏—à–∏ <b>/mailing</b>,'
                                   '–ò–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–æ—Ç–º–µ–Ω–∞</b>',
                                   reply_markup=await get_execute_button())
        await c.message.delete()


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
# @dp.message_handler(state=Mailing.process_mailing)
async def process_mailing(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text_list'].append(m.text)
        logging.info(f'{data["text_list"]}')
    await m.answer("–°—É–ø–µ—Ä, —Å—Å—ã–ª–∫—É –≤–∏–∂—É. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ, –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
                       reply_markup=await get_mailing_keyboard())
    await Mailing.confirm_mailing.set()


# –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ä–æ–ª–µ–π –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –≤—Å–µ ID —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ä–æ–ª—è–º–∏, –∑–∞—Ç–µ–º —É–º–Ω–æ–∂–∞–µ–º –º–∞—Å—Å–∏–≤ —Å
# —Å—Å—ã–ª–∫–∞–º–∏ –¥–æ –¥–ª–∏–Ω–Ω—ã —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
# @dp.callback_query_handler(mailing_callback.filter(action='execute'), state=Mailing.confirm_mailing)
async def execute_mailing(c: types.CallbackQuery, state: FSMContext):
    await c.answer()
    await c.message.answer('–ü—Ä–∏—Å—Ç–µ–≥–Ω–∏—Ç–µ —Ä–µ–º–Ω–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É üòé')
    async with state.proxy() as data:
        text_list = data['text_list']
        user_list = await active_users(data['roles'])
    counter = 0
    text_list = text_list * (len(user_list) // len(text_list)) + text_list[:(len(user_list) % len(text_list))]
    logging.info(f'{text_list}')
    logging.info(f'{user_list}')
    for i in range(len(user_list)):
        try:
            await bot.send_message(chat_id=user_list[i][0], text=f'–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª —Ç–µ–±–µ <a href="{text_list[i]}">—Å—Å—ã–ª–∫—É</a>'
                                                              f'–Ω–∞ —Ç–µ—Å—Ç ‚ö°\n\n'
                                                              f'‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 30 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ñ–æ—Ä–º–∞ '
                                                              f'–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞\n\n'
                                                              f'–ù–µ –∑–∞–±—É–¥—å —Å–≤–æ–π –≥—É–≥–ª-–∞–∫–∫–∞—É–Ω—Ç üì≤\n\n'
                                                              f'–£–¥–∞—á–∏ üçÄ')
            counter += 1
        except ChatNotFound as e:
            logging.exception(f"{user_list[i][1]}: {e}")
            await c.message.answer(f"{user_list[i][1]}: —Ç–µ—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –º–µ–Ω—è, –ª–∏–±–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")
        await asyncio.sleep(0.2)
    await c.message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {counter}')
    await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(mailing, Text(equals='–†–∞—Å—Å—ã–ª–∫–∞ üîä'), state="*", is_admin=True)
    dp.register_callback_query_handler(get_workers, mailing_callback.filter(action='worker'), state=Mailing.workers, is_admin=True)
    dp.register_callback_query_handler(chose_workers, mailing_callback.filter(action='load'), state=Mailing.workers, is_admin=True)
    dp.register_callback_query_handler(chose_workers, mailing_callback.filter(action='confirm'), state=Mailing.workers, is_admin=True)
    dp.register_callback_query_handler(more_workers, mailing_callback.filter(action='worker'), state=Mailing.process_workers, is_admin=True)
    dp.register_callback_query_handler(start_text, mailing_callback.filter(action='execute'), state=Mailing.workers, is_admin=True)
    dp.register_message_handler(start_mailing, state=Mailing.start_mailing)
    dp.register_callback_query_handler(chose_mailing, mailing_callback.filter(action='load'), state=Mailing.confirm_mailing, is_admin=True)
    dp.register_callback_query_handler(chose_mailing, mailing_callback.filter(action='confirm'), state=Mailing.confirm_mailing, is_admin=True)
    dp.register_message_handler(process_mailing, state=Mailing.process_mailing, is_admin=True)
    dp.register_callback_query_handler(execute_mailing, mailing_callback.filter(action='execute'), state=Mailing.confirm_mailing, is_admin=True)