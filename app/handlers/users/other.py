from datetime import datetime, date

from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher

from app.db.mysql_db import admins_ids
from app.filters.other import is_register
from app.utils.misc.sheets_append import add_user_array
from loader import dispatcher as dp, bot
from aiogram.dispatcher.filters import Text, CommandStart
from app.keyboards import other_kb
from app.utils.misc.states import FSMRegister
from app.db import mysql_db


@dp.message_handler(CommandStart(), state="*")
async def commands_start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.delete()
    await m.answer_sticker('CAACAgIAAxkBAAIE4GKSGruXCE8S-gM_iIJyaTbM9TGYAAJPAAOtZbwUa5EcjYesr5MkBA')
    await m.answer('–ü—Ä–∏–≤–µ—Ç ‚úå\n\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –æ—Ç–¥–µ–ª–µ –î–û–ö ü§ñ\n'
                                                     '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏ <b>/help</b>')
    if await is_register(m.from_user.id):
        await m.answer('–í–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§†\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=types.ReplyKeyboardRemove())
    else:
        await m.answer('–í–∏–∂—É, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üò±\n\n‚¨áÔ∏è–°–∫–æ—Ä–µ–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω—ë–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è‚¨áÔ∏è',
                       reply_markup=await other_kb.get_register_button())


@dp.callback_query_handler(other_kb.start_register.filter(status='yes'), state=None)
async def start_register(c: types.CallbackQuery):
    if await is_register(c.from_user.id):
        await c.answer()
        await c.message.answer('–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è üë∫')
        await c.message.delete()
    else:
        await c.answer()
        await FSMRegister.name.set()
        await c.message.answer('–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è‚úåÔ∏è\n\n'
                               '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—à—å –Ω–µ —Ç–∞–∫,'
                               ' –∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b>,'
                               '–∏–ª–∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start',
                               reply_markup=await other_kb.get_cancel_button())
        await c.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π\n\n'
                               '<b><i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–≥—Ä–µ–±–Ω–æ–π –î–∞–Ω–∏–ª–∞ –û–ª–µ–≥–æ–≤–∏—á</i></b>')
        await c.message.delete()


@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(m: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await m.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=FSMRegister.name)
async def get_fullname(m: types.Message, state: FSMContext):
    first_name = m.text.split()[1]
    await state.update_data(name=m.text.title())
    await FSMRegister.city.set()
    await m.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {first_name}!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å üèô\n'
                   f'<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</i>')


@dp.message_handler(state=FSMRegister.city)
async def get_city(m: types.Message, state: FSMContext):
    city = m.text.title()
    await state.update_data(city=city)
    await FSMRegister.role.set()
    await m.answer(f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ ü§ü\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –¢–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω–æ üóø',
                   reply_markup=await other_kb.get_pos_keyboard())


@dp.callback_query_handler(other_kb.register_callback.filter(stage='position'), state=FSMRegister.role)
async def get_role(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    role = int(callback_data.get('stage_data'))
    await state.update_data(role=role)
    if role in (5, 6, 7, 8):
        await FSMRegister.traineeship.set()
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å —ç—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä—É:\n'
                               '–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:', reply_markup=await other_kb.get_spec_keyboard())
    if role in (9, 10, 11):
        await FSMRegister.med_education.set()
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å —ç—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?',
                                  reply_markup=await other_kb.get_education_keyboard())


@dp.callback_query_handler(other_kb.register_callback.filter(stage='education'), state=FSMRegister.med_education)
async def get_education(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(
        traineeship=callback_data.get("stage_data"),
        profession=None,
        start_year=None,
        end_year=None
    )
    await FSMRegister.phone.set()
    await c.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')

@dp.callback_query_handler(other_kb.register_callback.filter(stage='spec'), state=FSMRegister.traineeship)
async def get_traineeship(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    if int(callback_data.get('stage_data')) in (2, 3, 4):
        await c.answer()
        await state.update_data(traineeship=int(callback_data.get('stage_data')))
        await FSMRegister.profession.set()
        await c.message.answer('–•–æ—Ä–æ—à–æ, –∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–∞?\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –õ–û–† –∏–ª–∏ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—è</i>')
    elif int(callback_data.get('stage_data')) == 1:
        await c.answer()
        await state.update_data(
            traineeship=int(callback_data.get('stage_data')),
            profession=None,
            start_year=None,
            end_year=None,
        )
        await c.message.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')
        await FSMRegister.phone.set()


@dp.message_handler(state=FSMRegister.profession)
async def get_profession(m: types.Message, state: FSMContext):
    await state.update_data(profession=m.text)
    await FSMRegister.start_year.set()
    await m.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üòé\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è')


@dp.message_handler(state=FSMRegister.start_year)
async def get_start_year(m: types.Message, state: FSMContext):
    await state.update_data(start_year=m.text)
    await FSMRegister.end_year.set()
    await m.answer('–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è')


@dp.message_handler(state=FSMRegister.end_year)
async def get_end_year(m: types.Message, state: FSMContext):
    await state.update_data(end_year=m.text)
    await m.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')
    await FSMRegister.phone.set()


@dp.message_handler(state=FSMRegister.phone)
async def get_phone_number(m: types.Message, state: FSMContext):
    await state.update_data(phone=m.text)
    await FSMRegister.email.set()
    await m.answer('–ü—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—É–≥–ª-–ø–æ—á—Ç—É üìß\n(–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ @gmail.com)')


@dp.message_handler(state=FSMRegister.email)
async def get_email(m: types.Message, state: FSMContext):
    await state.update_data(email=m.text)
    await FSMRegister.birthdate.set()
    await m.answer('–û–≥–æ–Ω—å, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î.–ú–ú.–ì–ì–ì–ì</i>')


@dp.message_handler(state=FSMRegister.birthdate)
async def finish_register(m: types.Message, state: FSMContext):
    try:
        birthdate = datetime.strptime(m.text, "%d.%m.%Y")
        assert birthdate < date(1970, 1, 1), await m.answer("–ü–æ—à—É—Ç–∏–ª–∏ –∏ —Ö–≤–∞—Ç–∏—Ç üôÑ\n–í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â—É—é –¥–∞—Ç—É")
        await state.update_data(bdate=birthdate, username='@' + m.from_user.username, chat_id=m.from_user.id)
        user = await state.get_data()
        await mysql_db.add_user(tuple(user.values()))
        await m.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å :)', reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    except ValueError:
        await m.answer("–≠—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ —à–∞–±–ª–æ–Ω—É.")



def register_handlers_other(dp: Dispatcher):
    dp.register_message_handler(commands_start, CommandStart())
    dp.register_message_handler(start_register, other_kb.start_register.filter(status='yes'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(get_fullname, state=FSMRegister.name)
    dp.register_message_handler(get_city, state=FSMRegister.city)
    dp.register_callback_query_handler(get_role, other_kb.register_callback.filter(stage='position'), state=FSMRegister.role)
    dp.register_message_handler(get_education, state=FSMRegister.med_education)
    dp.register_callback_query_handler(get_traineeship, other_kb.register_callback.filter(stage='spec'),
                                       state=FSMRegister.traineeship)
    dp.register_message_handler(get_profession, state=FSMRegister.profession)
    dp.register_message_handler(get_start_year, state=FSMRegister.start_year)
    dp.register_message_handler(get_end_year, state=FSMRegister.end_year)
    dp.register_message_handler(get_phone_number, state=FSMRegister.phone)
    dp.register_message_handler(get_email, state=FSMRegister.email)
    dp.register_message_handler(finish_register, state=FSMRegister.birthdate)



