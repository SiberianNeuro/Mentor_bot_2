from datetime import datetime
from loguru import logger
import random

from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text, CommandStart
from aiogram.dispatcher.handler import ctx_data

from app.keyboards.other_kb import *
from app.keyboards.admin_kb import get_mentors_keyboard
from app.utils.misc.wrappers import Wrappers
from app.models.states import Register

from app.db.mysql_db import is_register, user_db_roundtrip

from app.models.simple_answers import answers

from app.services.config import load_config


# @dp.message_handler(CommandStart(), state="*")
async def commands_start(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.delete()
    await msg.answer_sticker('CAACAgIAAxkBAAIE4GKSGruXCE8S-gM_iIJyaTbM9TGYAAJPAAOtZbwUa5EcjYesr5MkBA')
    await msg.answer('–ü—Ä–∏–≤–µ—Ç ‚úå\n\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –æ—Ç–¥–µ–ª–µ –î–û–ö ü§ñ')
    data = ctx_data.get()
    if data['is_register']:
        await msg.answer('–í–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§†\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        await msg.answer('–í–∏–∂—É, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üò±\n\n‚¨áÔ∏è–°–∫–æ—Ä–µ–µ –∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω—ë–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è‚¨áÔ∏è',
                         reply_markup=await get_register_button())


# @dp.callback_query_handler(other_kb.start_register.filter(status='yes'), state=None)
async def start_register(call: types.CallbackQuery):
    if await is_register(call.from_user.id):
        await call.answer()
        await call.message.answer('–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è üë∫')
        await call.message.delete()
        logger.debug(f"{call.from_user.username} - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    else:
        await call.answer()
        await Register.name.set()
        await call.message.answer('–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è‚úåÔ∏è\n\n'
                                  '–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—à—å –Ω–µ —Ç–∞–∫,'
                                  ' –∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b>,'
                                  '–∏–ª–∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start',
                                  reply_markup=await get_cancel_button())
        await call.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π\n\n'
                                  '<b><i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–≥—Ä–µ–±–Ω–æ–π –î–∞–Ω–∏–ª–∞ –û–ª–µ–≥–æ–≤–∏—á</i></b>')
        await call.message.delete()
        logger.log('REGISTRATION', f'@{call.from_user.username} started registration process...')


# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(msg: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await msg.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=types.ReplyKeyboardRemove())


# @dp.message_handler(state=FSMRegister.name)
async def get_fullname(msg: types.Message, state: FSMContext):
    first_name = msg.text.split()[1]
    await state.update_data(name=msg.text.title())
    await Register.city.set()
    await msg.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {first_name}!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å üèô\n'
                     f'<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</i>')


# @dp.message_handler(state=FSMRegister.city)
async def get_city(msg: types.Message, state: FSMContext):
    city = msg.text.title()
    await state.update_data(city=city)
    await Register.role.set()
    await msg.answer('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ ü§ü\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n\n'
                     '<b>–í—Ä–∞—á-—Å—Ç–∞–∂–µ—Ä:</b> —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏–ª—Å—è –≤ "–ü—Ä–∏–∑—ã–≤–∞–ù–µ—Ç" –Ω–∞ —Å—Ç–∞–≤–∫—É –≤—Ä–∞—á–∞ –∏ –µ—â–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å '
                     '–æ–±—É—á–µ–Ω–∏–µ\n\n '
                     '<b>–ò.–û. –≤—Ä–∞—á–∞:</b> —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ, –Ω–æ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –Ω–∞ '
                     '–≤—Ä–∞—á–∞\n\n '
                     '<b>–í—Ä–∞—á:</b> —Ç—ã –ø—Ä–æ—à–µ–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –Ω–∞ –≤—Ä–∞—á–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫–æ–Ω—á–∏–ª —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É\n\n'
                     '<b>–°–µ–Ω—å–æ—Ä –≤—Ä–∞—á–µ–π:</b> —Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—à—å –≤—Ä–∞—á–∞–º–∏ —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞\n\n'
                     '<b>–°—Ç–∞–∂–µ—Ä L1:</b> —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏–ª—Å—è –≤ "–ü—Ä–∏–∑—ã–≤–∞–ù–µ—Ç" –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –º–ª–∞–¥—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ '
                     '–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n '
                     '<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ L1:</b> —Ç—ã –ø—Ä–æ—à–µ–ª —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –∏ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–æ–º–∞–Ω–¥–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n'
                     '<b>–°–µ–Ω—å–æ—Ä L1:</b> —Ç—ã —Ä—É–∫–æ–≤–æ–¥–∏—à—å –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n'
                     '–í—ã–±–∏—Ä–∞–π —á–µ—Å—Ç–Ω–æ üóø',
                     reply_markup=await get_pos_keyboard())


# @dp.callback_query_handler(other_kb.register_callback.filter(stage='position'), state=FSMRegister.role)
async def get_role(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    role = int(callback_data.get('stage_data'))
    await state.update_data(role=role)
    if role in (5, 6, 7, 8):
        await Register.traineeship.set()
        await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å —ç—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –¢–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä—É:\n'
                                  '–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:\n\n'
                                  '<b>–ù–µ –ø–æ—Å—Ç—É–ø–∞–ª –∏ –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å:</b> —Ç—ã –Ω–µ –±—ã–ª –≤ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä–µ –∏ –Ω–µ —Ö–æ—á–µ—à—å —Ç—É–¥–∞\n\n'
                                  '<b>–ù–µ –ø–æ—Å—Ç—É–ø–∞–ª, –Ω–æ —Å–æ–±–∏—Ä–∞—é—Å—å:</b> —Ç—ã –Ω–µ –±—ã–ª –≤ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä–µ, –Ω–æ —Ö–æ—á–µ—à—å –∏ –±—É–¥–µ—à—å —Ç—É–¥–∞ '
                                  '–ø–æ—Å—Ç—É–ø–∞—Ç—å\n\n '
                                  '<b>–£—á—É—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b> —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—è –≤ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n\n'
                                  '<b>–ó–∞–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ:</b> —Ç—ã —É–∂–µ –≤—ã–ø—É—Å—Ç–∏–ª—Å—è –∏–∑ –æ—Ä–¥–∏–Ω–∞—Ç—É—Ä—ã —Å –¥–∏–ø–ª–æ–º–æ–º –Ω–∞ —Ä—É–∫–∞—Ö',
                                  reply_markup=await get_spec_keyboard())
        await call.message.delete()
    if role in (9, 10, 11):
        await Register.med_education.set()
        await call.message.answer(
            '–û—Ç–ª–∏—á–Ω–æ, —Å —ç—Ç–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å. –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?',
            reply_markup=await get_education_keyboard())
        await call.message.delete()


# @dp.callback_query_handler(other_kb.register_callback.filter(stage='education'), state=FSMRegister.med_education)
async def get_education(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    await state.update_data(
        traineeship=int(callback_data.get("stage_data")),
        profession=None,
        start_year=None,
        end_year=None
    )
    await Register.phone.set()
    await call.message.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')
    await call.message.delete()


# @dp.callback_query_handler(other_kb.register_callback.filter(stage='spec'), state=FSMRegister.traineeship)
async def get_traineeship(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    if int(callback_data.get('stage_data')) in (2, 3, 4):
        await call.answer()
        await state.update_data(traineeship=int(callback_data.get('stage_data')))
        await Register.profession.set()
        await call.message.answer('–•–æ—Ä–æ—à–æ, –∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–∞?\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –õ–û–† –∏–ª–∏ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—è</i>')
        await call.message.delete()
    elif int(callback_data.get('stage_data')) == 1:
        await call.answer()
        await state.update_data(
            traineeship=int(callback_data.get('stage_data')),
            profession=None,
            start_year=None,
            end_year=None,
        )
        await call.message.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')
        await Register.phone.set()
        await call.message.delete()


# @dp.message_handler(state=FSMRegister.profession)
async def get_profession(msg: types.Message, state: FSMContext):
    await state.update_data(profession=msg.text)
    await Register.start_year.set()
    await msg.answer('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä üòé\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è')


# @dp.message_handler(state=FSMRegister.start_year)
async def get_start_year(msg: types.Message, state: FSMContext):
    await state.update_data(start_year=msg.text)
    await Register.end_year.set()
    await msg.answer('–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è')


# @dp.message_handler(state=FSMRegister.end_year)
async def get_end_year(msg: types.Message, state: FSMContext):
    await state.update_data(end_year=msg.text)
    await msg.answer('–ó–∞–ø–∏—Å–∞–ª üëå\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—è–º:\n–í–≤–µ–¥–∏ —Å–≤–æ–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±')
    await Register.phone.set()


# @dp.message_handler(state=FSMRegister.phone)
async def get_phone_number(msg: types.Message, state: FSMContext):
    await state.update_data(phone=msg.text)
    await Register.email.set()
    await msg.answer('–ü—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—É–≥–ª-–ø–æ—á—Ç—É üìß\n(–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ @gmail.com)')


# @dp.message_handler(state=FSMRegister.email)
async def get_email(msg: types.Message, state: FSMContext):
    await state.update_data(email=msg.text)
    await Register.birthdate.set()
    await msg.answer('–û–≥–æ–Ω—å, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–î–î.–ú–ú.–ì–ì–ì–ì</i>')


# @dp.message_handler(state=FSMRegister.birthdate)
async def finish_register(msg: types.Message, state: FSMContext):
    config = load_config('.env')
    try:
        birthdate = datetime.strptime(msg.text, "%d.%m.%Y")
        await state.update_data(bdate=str(birthdate), username='@' + msg.from_user.username,
                                chat_id=str(msg.from_user.id))
        user = await state.get_data()
        user_info = await user_db_roundtrip(tuple(user.values()))
        await msg.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª –º–Ω–µ –≤—Ä–µ–º—è üëè\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ :)',
                         reply_markup=types.ReplyKeyboardRemove())
        if user['role'] not in (8, 9):
            await state.finish()
            return
        user_info = await Wrappers.user_wrapper(user_info)
        await msg.bot.send_message(
            chat_id=config.misc.router_chat, text=f'–ù–æ–≤—ã–π —Å—Ç–∞–∂–µ—Ä –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n{user_info["wrapper"]}\n\n–ö–æ–º—É '
                                                  f'—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º?',
            reply_markup=await get_mentors_keyboard(msg.from_user.id)
        )
        await state.finish()
        logger.log('REGISTRATION', f'@{msg.from_user.username} completed registration.')
    except ValueError:
        await msg.answer("–≠—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ —à–∞–±–ª–æ–Ω—É.")


async def echo(msg: types.Message):
    if "–ø—Ä–∏–≤–µ—Ç" in msg.text.lower():
        await msg.reply(random.choice(answers['hello']))
    else:
        await msg.reply(random.choice(answers['others']))


def setup(dp: Dispatcher):
    dp.register_message_handler(commands_start, CommandStart(), state="*", chat_type=types.ChatType.PRIVATE)
    dp.register_callback_query_handler(start_register, register_callback.filter(stage='yes'),
                                       chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(cancel_handler, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(get_fullname, state=Register.name)
    dp.register_message_handler(get_city, state=Register.city)
    dp.register_callback_query_handler(get_role, register_callback.filter(stage='position'), state=Register.role)
    dp.register_callback_query_handler(get_education, register_callback.filter(stage='education'),
                                       state=Register.med_education)
    dp.register_callback_query_handler(get_traineeship, register_callback.filter(stage='spec'),
                                       state=Register.traineeship)
    dp.register_message_handler(get_profession, state=Register.profession)
    dp.register_message_handler(get_start_year, state=Register.start_year)
    dp.register_message_handler(get_end_year, state=Register.end_year)
    dp.register_message_handler(get_phone_number, state=Register.phone)
    dp.register_message_handler(get_email, state=Register.email)
    dp.register_message_handler(finish_register, state=Register.birthdate)
    dp.register_message_handler(echo, chat_type=types.ChatType.PRIVATE)
