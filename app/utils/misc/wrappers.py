from datetime import datetime
from typing import Optional, Union, Dict, Any

from sqlalchemy.orm import sessionmaker

from app.models.views import UserView
from app.models.user import User
from app.models.exam import Exam


class ExamWrapper:
    document: str = None
    user: Union[int, str] = None
    stage_id: Union[int, str] = None
    result_id: Union[int, str] = None
    score: float = None
    exam_date: Union[datetime.date, str] = None
    retake_date: Union[datetime.date, None] = None
    calls: str = None
    exam_id: Union[int, str] = None
    wrapper: str = None

    def __init__(self, data: Union[Dict[str, Any], str], db: sessionmaker):
        self.db = db
        self.data = data
        if isinstance(self.data, str):
            self.user = self.data
        if isinstance(self.data, Dict):
            self.document = self.data['document']
            self.stage_id = self.data['stage_id']
            self.result_id = self.data['result_id']

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        del self

    async def _get_data(self):
        if isinstance(self.data, Dict):
            async with self.db.begin() as session:
                session.add(
                    Exam(
                        document_id=self.document,
                        user_id=self.data['user_id'],

                    )
                )

    async def _get_wrapper(self):

        for key, value in self.data.items():
            if value is None:
                self.data[key] = '-'

        wrapper = f'<b>{self.data["fullname"]}</b>\n' \
                  f'–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞ - {self.data["stage"]}\n' \
                  f'–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ - {self.data["result"]}\n' \
                  f'–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤ - {self.data["score"]}\n' \
                  f'–°—Å—ã–ª–∫–∞ YT: {self.data["link"]}\n'

        if self.data['result_id'] == 3 and self.data['stage_id'] == 3:
            wrapper += f'–ó–≤–æ–Ω–∫–∏: \n{self.data["calls"]}'

        if self.data['result_id'] == 2:
            wrapper += f'–î–∞—Ç–∞ –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ - {self.data["retake_date"]}'

        if self.data['result_id'] == 1:
            wrapper += f'<i>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è. –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</i>\n'

        # self.document = self.data['document_id']
        # self.wrapper = wrapper
        # self.exam_id = self.data['id']
        # self.stage_id = self.data['stage_id']
        # self.result_id = self.data['result_id']

        # return {"document": data['document_id'], "wrapper": wrapper, "exam_id": data['id'],
        #         "stage_id": data['stage_id'],
        #         "result_id": data['result_id']}

    @staticmethod
    async def user_wrapper(user_info: UserView) -> dict:
        active = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if user_info.active == 1 else '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        wrapper = f'<b>{user_info.fullname}</b> {user_info.username}\n' \
                  f'–ö–æ–º–∞–Ω–¥–∞: {user_info.team or "-"}\n' \
                  f'<u>{active}</u>\n\n' \
                  f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info.role}\n' \
                  f'–ì–æ—Ä–æ–¥: {user_info.city}\n'

        if user_info.role_id in (9, 10, 11):
            wrapper += f'–ú–µ–¥. –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_info.traineeship}\n\n'

        elif user_info.role_id in (5, 6, 7, 8):
            wrapper += f'–û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞: {user_info.traineeship}\n'
            if user_info.traineeship != "–ù–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å":
                wrapper += f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user_info.profession}\n' \
                           f'–ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {user_info.start_year}\n' \
                           f'–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {user_info.end_year}\n\n'

        wrapper += f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {user_info.phone_number}\n' \
                   f'e-mail: {user_info.email}'
        return {"wrapper": wrapper, "user_id": user_info.id, "active_id": user_info.active}

    @staticmethod
    async def welcome_wrapper(welcome_info: dict) -> str:
        wrapper = f'–¢–µ–ø–µ—Ä—å —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ telegram-–≥—Ä—É–ø–ø—ã üëª\n\n'

        mentor_chat_link = welcome_info['l1_chat'] if welcome_info['role_id'] == 12 else welcome_info['l3_chat']

        if welcome_info['role_id'] != 12:
            wrapper += f'<b>{welcome_info["doctors_chat"]}</b>\n' \
                       f'–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –Ω–∞ –∫–∞–Ω–∞–ª, –≥–¥–µ –æ–±—â–∞—é—Ç—Å—è –≤—Å–µ –Ω–∞—à–∏ –¥–æ–∫—Ç–æ—Ä–∞ üßë‚Äç‚öï\n\n' \
                       f'<b>{welcome_info["headmaster_chat"]}</b>\n' \
                       f'–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –æ–±—â–∞—é—Ç—Å—è –≤—Å–µ —Å—Ç–∞–∂–µ—Ä—ã üòâ'

        wrapper += f'<b>{mentor_chat_link}</b>\n' \
                   f'–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Ç—ã –ø–æ–ø–∞–¥–µ—à—å –≤ —á–∞—Ç —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã üë©‚Äçüéì\n' \
                   f'–¢–≤–æ–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, {welcome_info["mentor_name"]} {welcome_info["mentor_username"]}, ' \
                   f'–±—É–¥–µ—Ç –Ω–∞ —Å–≤—è–∑–∏ —Å —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ –∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º ü§©\n' \
                   f'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å —á–∞—Ç üòá'

        return wrapper


class Wrappers:
    pass
